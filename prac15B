#multiple linear regression

import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns 
from sklearn.linear_model import LinearRegression 
from sklearn.model_selection import train_test_split 
from sklearn.metrics import r2_score, mean_squared_error 
# Step 1: Load the dataset 
# You can also download from a CSV if needed. Here's how to load it from seaborn 
url = "https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv" 
df = pd.read_csv(url) 
# Show first few rows 
print(df.head()) 
# Step 2: Define features and target 
X = df.drop('Outcome', axis=1)   # Independent variables 
y = df['Outcome']                
# Dependent variable (can be considered a regression problem for demonstration) 
# Step 3: Train/test split 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) 
# Step 4: Build and train the model 
model = LinearRegression() 
model.fit(X_train, y_train) 
# Step 5: Make predictions 
y_pred = model.predict(X_test) 
# Step 6: Evaluate the model 
print("\nModel Coefficients:") 
for col, coef in zip(X.columns, model.coef_):
    print(f"{col}: {coef:.4f}") 
print(f"\nIntercept: {model.intercept_:.4f}") 
print(f"RÂ² Score: {r2_score(y_test, y_pred):.4f}") 
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred):.4f}") 
plt.scatter(y_test, y_pred, color='blue') 
plt.xlabel("Actual Outcome") 
plt.ylabel("Predicted Outcome") 
plt.title("Actual vs Predicted - Multiple Linear Regression") 
plt.grid(True) 
plt.show()
