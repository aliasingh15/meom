#decision tree play tennis or not

import pandas as pd 
from sklearn.preprocessing import LabelEncoder 
from sklearn.tree import DecisionTreeClassifier, plot_tree 
from sklearn.model_selection import train_test_split 
from sklearn.metrics import accuracy_score 
# Step 1: Create the dataset 
data = { 
'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Rain', 'Rain', 'Rain', 'Overcast', 'Sunny', 
'Sunny', 'Rain'], 
'Wind': ['Weak', 'Strong', 'Weak', 'Weak', 'Strong', 'Weak', 'Strong', 'Weak', 'Strong', 
'Strong'], 
'PlayTennis': ['No', 'No', 'Yes', 'Yes', 'No', 'Yes', 'Yes', 'No', 'Yes', 'Yes'] 
} 
df = pd.DataFrame(data) 
# Step 2: Encode categorical features 
le_outlook = LabelEncoder() 
le_wind = LabelEncoder() 
le_play = LabelEncoder() 
df['Outlook_encoded'] = le_outlook.fit_transform(df['Outlook']) 
df['Wind_encoded'] = le_wind.fit_transform(df['Wind']) 
df['PlayTennis_encoded'] = le_play.fit_transform(df['PlayTennis']) 
# Features and Target 
X = df[['Outlook_encoded', 'Wind_encoded']] 
y = df['PlayTennis_encoded'] 
# Step 3: Train/Test split 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, 
random_state=42) 
# Step 4: Train Decision Tree model 
clf = DecisionTreeClassifier(criterion='entropy', random_state=0) 
clf.fit(X_train, y_train) 
# Step 5: Predict and evaluate 
y_pred = clf.predict(X_test) 
accuracy = accuracy_score(y_test, y_pred) 
print(f"Predictions: {le_play.inverse_transform(y_pred)}") 
print(f"Actual: {le_play.inverse_transform(y_test)}") 
print(f"Accuracy: {accuracy:.2f}") 
# Step 6: Visualize the tree 
import matplotlib.pyplot as plt 
plt.figure(figsize=(10,6)) 
plot_tree(clf, feature_names=['Outlook', 'Wind'], class_names=le_play.classes_, filled=True) 
plt.title("Decision Tree for Play Tennis") 
plt.show() 
