# Linear Regression: Predicting Weight from Height
#prac6A


import pandas as pd 
from sklearn.linear_model import LinearRegression 
import matplotlib.pyplot as plt 
# Dataset 
height = [151, 174, 138, 186, 128, 136, 179, 163, 152] 
weight = [63, 81, 56, 91, 47, 57, 76, 72, 62] 
# Create DataFrame 
df = pd.DataFrame({'Height': height, 'Weight': weight}) 
# Reshape height for model 
X = df[['Height']]  # Feature 
y = df['Weight']    # Target 
# Linear Regression model 
model = LinearRegression() 
model.fit(X, y) 
# Predict 
df['Predicted_Weight'] = model.predict(X) 
# Print results 
print("Intercept:", model.intercept_) 
print("Coefficient:", model.coef_) 
# Plot 
plt.scatter(df['Height'], df['Weight'], color='blue', label='Actual') 
plt.plot(df['Height'], df['Predicted_Weight'], color='red', label='Predicted') 
plt.xlabel("Height") 
plt.ylabel("Weight") 
plt.title("Linear Regression: Height vs Weight") 
plt.legend() 
plt.show()



#Decision Tree on Titanic Dataset 

import seaborn as sns 
from sklearn.tree import DecisionTreeClassifier, plot_tree 
from sklearn.model_selection import train_test_split 
# Load Titanic dataset 
titanic = sns.load_dataset("titanic") 
# Select features and target 
features = titanic[['pclass', 'sex', 'age', 'fare']].dropna() 
features['sex'] = features['sex'].map({'male': 0, 'female': 1}) 
target = titanic.loc[features.index, 'survived'] 
# Train/test split 
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, 
random_state=42) 
# Decision Tree model 
dtree = DecisionTreeClassifier(max_depth=3) 
dtree.fit(X_train, y_train) 
# Plot the tree 
plt.figure(figsize=(12, 8)) 
plot_tree(dtree, feature_names=['pclass', 'sex', 'age', 'fare'], class_names=['Not Survived', 'Survived'], filled=True) 
plt.title("Decision Tree on Titanic Dataset") 
plt.show() 
# Accuracy 
print("Model Accuracy:", dtree.score(X_test, y_test))
